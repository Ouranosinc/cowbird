from typing import Optional

from watchdog.events import FileSystemEventHandler
from watchdog.observers.api import ObservedWatch
from watchdog.utils import BaseThread

class EventDispatcher(BaseThread):
    def timeout(self) -> int: ...
    def stop(self) -> None: ...
    def join(self, timeout: Optional[float] = ...) -> None: ...


class BaseObserver(EventDispatcher):
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def join(self, timeout: Optional[float] = ...) -> None: ...
    def schedule(self, handler: FileSystemEventHandler, path: str, recursive: bool) -> ObservedWatch: ...
