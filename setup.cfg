[bumpversion]
current_version = 1.2.0
commit = True
tag = True
tag_name = {new_version}

[bumpversion:file:README.rst]
search = {current_version}
replace = {new_version}

[bumpversion:file:Makefile]
search = APP_VERSION ?= {current_version}
replace = APP_VERSION ?= {new_version}

[bumpversion:file:cowbird/__meta__.py]
search = __version__ = "{current_version}"
replace = __version__ = "{new_version}"

[bumpversion:file:CHANGES.rst]
search = 
	`Unreleased <https://github.com/Ouranosinc/cowbird/tree/master>`_ (latest)
	------------------------------------------------------------------------------------
replace = 
	`Unreleased <https://github.com/Ouranosinc/cowbird/tree/master>`_ (latest)
	------------------------------------------------------------------------------------
	
	* Nothing yet.
	
	`{new_version} <https://github.com/Ouranosinc/cowbird/tree/{new_version}>`_ ({now:%%Y-%%m-%%d})
	------------------------------------------------------------------------------------

[bumpversion:file:docker/Dockerfile-base]
search = LABEL Version="{current_version}"
replace = LABEL Version="{new_version}"

[wheel]
universal = 1

[doc8]
max-line-length = 120
ignore-path = docs/_build,docs/autoapi

[docformatter]
recursive = true
# Don't employ 'wrap-descriptions 120' since this *enforces* that length and rearranges format if any word can fit
# within remaining space, which often cause big diffs of ugly formatting for no important reason. Instead only check
# general formatting operations, and let other linter capture docstrings going over 120 (what we really care about).
wrap-descriptions = 0
wrap-summaries = 120
make-summary-multi-line = True
pre-summary-newline = True

[flake8]
ignore = E501,W291,W503,W504
max-line-length = 120
exclude = 
	.git,
	__pycache__,
	build,
	dist,
	env,
	eggs,
	parts,
	share,

[pylint]

[bandit]
exclude = *.egg-info,build,dist,env,./tests,test_*
targets = .

[tool:isort]
line_length = 120
multi_line_output = 3
lines_between_types = 0
default_section = THIRDPARTY
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
extra_standard_library = posixpath,typing,typing_extensions
known_first_party = cowbird
known_third_party = mock
combine_as_imports = false

[coverage:run]
branch = true
source = ./
include = cowbird/*
omit = 
	setup.py
	docs/*
	tests/*
	cowbird/typedefs.py

[coverage:report]
exclude_lines = 
	pragma: no cover
	raise AssertionError
	raise NotImplementedError
	raise MagpieHttpError
	if __name__ == "__main__":
	if TYPE_CHECKING:
	if LOGGER.isEnabledFor
	LOGGER.debug
	LOGGER.info
	LOGGER.warning
	LOGGER.error
	LOGGER.exception
	LOGGER.log
	@overload

[tool:pytest]
addopts = 
	--strict-markers
	--tb=native
markers = 
	api: cowbird API operations
	cli: cowbird CLI helper operations
	utils: cowbird utility functions
	filesystem: cowbird filesystem operations
	functional: cowbird functional operations
	magpie: cowbird tests that require an external Magpie instance
	monitoring: cowbird monitoring operations
	permissions: cowbird permissions synchronizer
	request_task: cowbird outbound request task
	handler_factory: cowbird handler factory
	database: cowbird database
	geoserver: geoserver requests
	online: test that require external resources (ex: a Geoserver instance)

[mypy]
mypy_path = cowbird/stubs
namespace_packages = true
plugins = mypy_zope:plugin
exclude = cowbird/stubs/*|config/*|docs/*|tests/*
pretty = true
strict = true
strict_optional = false
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = false
allow_untyped_decorators = false
allow_redefinition = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
show_error_codes = true
implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = false
# Because 'JSON' is very predominant in the code, ignore common errors that its definition creates even those ignores
# could hide away real error situations. However, this is expected to be in minimal quantity that would probably be
# caught in a (more robust) runtime test anyway. Favor the developer typing experience instead by avoiding 'cast' and
# comments 'type: ignore' all over the place, and focus more on other typing errors to better document expected types.
#   - 'union-attr' happens a lot because of 'JSON = Union[...]' with all its variations
#   - 'index' happens a lot because of 'JSON' mapping conflicting with 'JSON' listing
# Other errors are also mostly to make development quicker, to allow not "exact" typing definitions, such as when
# reusing the same variable with an overridden distinct-typed value.
disable_error_code = assignment,
                     literal-required,
                     comparison-overlap,
                     call-overload,
                     no-redef,
                     union-attr,
                     index

[mypy-tests.*]
allow_untyped_calls = true
disallow_untyped_defs = false
