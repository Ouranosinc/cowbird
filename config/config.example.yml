## Combined configuration definition to setup objects at Cowbird startup
## See documentation 'Configuration' for more details on each section.

# [Required] Definition of managed services by Cowbird.
# FIXME: rename 'services' section here to 'handlers' and refactor (issue https://github.com/Ouranosinc/cowbird/issues/22)
services:
  Magpie:
    active: true
    url: https://${HOSTNAME}/magpie
    admin_user: ${MAGPIE_ADMIN_USER}
    admin_password: ${MAGPIE_ADMIN_PASSWORD}
  Geoserver:
    active: true
    url: http://${HOSTNAME}:8765/geoserver
    workspace_dir: ${WORKSPACE_DIR}
    admin_user: ${GEOSERVER_ADMIN}
    admin_password: ${GEOSERVER_PASSWORD}
  Catalog:
    active: true
    url: https://${HOSTNAME}/twitcher/ows/proxy/catalog
    workspace_dir: ${WORKSPACE_DIR}
  Thredds:
    active: true
  Nginx:
    active: true
  FileSystem:
    active: true
    priority: 1
    workspace_dir: ${WORKSPACE_DIR}

# [Required] This section defines how to synchronize permissions between services when they share resources
sync_permissions:
  # Friendly name to identify a sync point (The value is not used by Cowbird so this can be any relevant keyword)
  user_workspace:
    services: # Contains the different resources that can be synchronized, ordered by service
      thredds: # Service name, which should also exist in Magpie
        # Resource key (ex.: thredds_workspace): Custom name to represent a resource path.
        #
        # Example of resource that uses variables and a `MULTI_TOKEN`.
        # Here, with the config below, if we have an input resource path
        # `/geoserver/workspaces/user_xyz/dir1/dir2/file_abc` that matches with the `geoserver_workspace` resource key,
        # the `user` variable name would be matched with `user_xyz` and `synched_file`, with `file_abc`.
        # Also, this key would need to sync permissions with the `thredds_workspace` resource key, considering the
        # `permissions_mapping` defined below. The `thredds_workspace` would be deduced to the resource path
        # `/catalog/workspaces/user_xyz/dir1/dir2/subdir/file_abc`.
        # The types of each segment of this target resource path would be deduced
        # from the `thredds_workspace` config below.
        thredds_workspace:
          - name: catalog
            type: service
          - name: workspaces
            type: directory
          - name: "{user}"
            type: directory
          - name: "**"
            type: directory
          - name: subdir
            type: directory
          - name: "{synched_file}"
            type: file
      geoserver:
        geoserver_workspace:
          - name: geoserver
            type: service
          - name: workspaces
            type: workspace
          - name: "{user}"
            type: workspace
          - name: "**"
            type: workspace
          - name: "{synched_file}"
            type: workspace
    # [Required] This section defines an array of permissions mapping between services
    permissions_mapping:
      # A `read` permission for `thredds_workspace` creates/deletes all specified `geoserver_workspace` permissions.
      # And a specified `geoserver_workspace` permission creates/deletes a `read` permission on `thredds_workspace`.
      - "geoserver_workspace : [getCapabilities, getFeature, getFeatureInfo] <-> thredds_workspace : read"
      # A `createStoredQuery` permission on `geoserver_workspace` creates/deletes
      # a `write` permission on `thredds_workspace`, and vice versa.
      - "geoserver_workspace : createStoredQuery <-> thredds_workspace : write"
  weaver_outputs:
    services:
      api:
        process_description:
          - name: processes
            type: route
          - name: "{processID}"
            type: route
        process_job_status:
          - name: processes
            type: route
          - name: "{processID}"
            type: route
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
        job_status:
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
        job_outputs:
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
          - name: outputs
            type: route
        weaver_wps_outputs:
          - name: wpsoutputs
            type: route
          - name: weaver
            type: route
          - name: "{jobID}"
            type: route
    permissions_mapping:
      # When user is granted access to an output (either side),
      # output retrieval is allowed from both endpoints (wps-outputs/weaver).
      - "weaver_wps_outputs : read <-> job_outputs : read"
      # When output can be retrieved, access to details about the process and
      # the job are also provided (to understand what each output represents),
      # but getting read access to a process description should not grant
      # access to all possible outputs of every underlying job of that process
      # (eg: different users running the same process = different job access,
      # but same process description visible).
      - "weaver_wps_outputs : read -> job_status : read"
      # process-prefixed items can be only one-way since wps-outputs does not
      # encode the 'processID' information ('jobID' directly the top-level dir)
      - "process_job_status : read -> weaver_wps_outputs : read"
      - "process_job_status : read -> job_status : read"
      # different permission (match), otherwise all jobs/outputs become available.
      - "process_job_status : read -> process_description : read-match"
