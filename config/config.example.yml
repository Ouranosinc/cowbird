## Combined configuration definition to setup objects at Cowbird startup
## See documentation 'Configuration'

# [Required] Definition of managed services by Cowbird.
#
# services:
# ---------
#   [Required] Definition of managed services by Cowbird. Each service is provided as string that must match an actual
#   implementation in Cowbird. Each service must be further configured with one or more of the following parameters. If
#   a required parameter is missing for a service it will throw a `ServiceConfigurationException` exception.
#   For more details on available services on Magpie, refer to these pages :
#     - https://pavics-magpie.readthedocs.io/en/latest/services.html#available-services
#     - https://pavics-magpie.readthedocs.io/en/latest/autoapi/magpie/services/index.html
#
#   service:
#     active:             [optional, default=False] bool allowing to deactivate a service and stop managing it
#     priority:           [optional, default=math.inf] Relative priority between services while handling events
#                         Lower values have higher priority, default value is last
#     url:                [optional, default=None] URI of the web service represented by this Cowbird service.
#                         Some Cowbird services do not represent web service, but other will throw an exception if
#                         missing.
#     workspace_dir:      [optional, default=None] Location of the users workspace root.
#                         Required for the following services : FileSystem, Catalog and Geoserver
#
# TODO: rename 'services' section here to 'handlers' and refactor all related 'services' in code, will be done in another PR
# since services is used everywhere (services folder, ServiceFactory, services api, services cli, tests ...)
services:
  Magpie:
    active: true
    url: https://${HOSTNAME}/magpie
    admin_user: ${MAGPIE_ADMIN_USER}
    admin_password: ${MAGPIE_ADMIN_PASSWORD}
  Geoserver:
    active: true
    url: http://${HOSTNAME}:8765/geoserver
    workspace_dir: ${WORKSPACE_DIR}
    admin_user: ${GEOSERVER_ADMIN}
    admin_password: ${GEOSERVER_PASSWORD}
  Catalog:
    active: true
    url: https://${HOSTNAME}/twitcher/ows/proxy/catalog
    workspace_dir: ${WORKSPACE_DIR}
  Thredds:
    active: true
  Nginx:
    active: true
  FileSystem:
    active: true
    priority: 1
    workspace_dir: ${WORKSPACE_DIR}

# [Required] This section defines how to synchronize permissions between services when they share resources
# This is used only for the synchronization of permissions between Magpie services/resources.
sync_permissions:
  # Friendly name to identify a sync point (The value is not used by Cowbird so this can be any relevant keyword)
  user_workspace:
    # [Required] This section defines a list of services and resources that exists in Magpie.
    services: # Contains the different resources that can be synchronized, ordered by service
      thredds: # Service name, which should also exists in Magpie
        # Resource key (ex.: nginx_workspace): Custom name to represent a resource path.
        # It should correspond to the names used in the `permission_mappings` section below.
        # It contains the list of each segment of its resource path, with their corresponding name and type.
        #
        # The name of a segment can either be a string name, a variable or a `MULTI_TOKEN` (`**`).
        #
        # Variables are indicated by a name written between braces (ex.: {variable_name}). This represents a single
        # repetition of any segment name with the corresponding type. These variables can be used any number of time in
        # a resource path. They are useful to indicate the corresponding location of the resource segment in a mapped
        # permission. Note that all variables found in a target resource path should also be included in the source
        # resource path.
        #
        # MULTI_TOKEN represent any number (0 or more) of names that fit with the corresponding type.
        # Also, the MULTI_TOKEN can only be used one time in each list of path segments. This is to avoid ambiguous
        # cases that would result with using multiple MULTI_TOKENs, since multiple ways of matching the resource path
        # would then be possible. For example with a tokenized path `**/**` and an input resource `seg1/seg2/seg3`,
        # multiple choices of matching appear when we try to match a suffix (mentioned below). We could match `seg1/seg2`
        # with the first token, and `seg3` with the second token, we could also match `seg1` with the first token, and
        # `seg2/seg3` with the second token, etc.
        #
        # The variables and tokens are useful to know the type of any segments that is not named. For example, with the
        # config below, if we have an input resource path `/nginx/workspaces/user_xyz/dir1/dir2/file_abc` that matches with
        # the `nginx_workspace` resource key, the `user` variable name would be matched with `user_xyz` and `synched_file`, with `file_abc`.
        # Also, this key would need to sync permissions with the `thredds_workspace` resource key, considering the
        # `permission_mappings` defined below. The `thredds_workspace` would be deduced to the resource path
        # `/catalog/workspaces/user_xyz/dir1/dir2/subdir/file_abc`.
        # The types of each segment of this target resource path  would be deduced from the `thredds_workspace` config below.
        nginx_workspace:
          - name: nginx
            type: service
          - name: workspaces
            type: folder
          - name: "{user}"
            type: folder
          - name: "**"
            type: folder
          - name: "{synched_file}"
            type: file
        thredds_workspace:
          - name: catalog
            type: service
          - name: workspaces
            type: folder
          - name: "{user}"
            type: folder
          - name: "**"
            type: folder
          - name: subdir
            type: folder
          - name: "{synched_file}"
            type: file
    # [Required] This section defines an array of permissions mapping between services
    # Each item found in the `permissions_mapping` use the following format :
    #     resource_key1 : permission(s) (-> or <- or <->) resource_key2 : permission(s)
    # The arrows between the 2 resources indicate the direction of the synchronization, and which resources can be a
    # `source` or `target` resource.
    # In the case of `<->` arrow, the synchronization of permissions can be done in either direction. Also, it is
    # important to note that in thise case, both mapped resources should matching `variable` names if any, and if one
    # of the resource uses the `**` MULTI_TOKEN, the other resource should also include it in its path, to know how to
    # match the segments.
    # In the case of `->` or `<-` arrow, the synchronization is only done one way. In this case, the `source` resource
    # path should include every `variable` names found in the `target` resource, but it can have more `variables` that
    # just won't be used in the `target` path. Also, if the `target` resource uses the MULTI_TOKEN `**`, the `source`
    # resource should have one too. The `source` can also use the `**` token even if the `target` doesn't include one.
    permissions_mapping:
      # A read permission for nginx_workspace creates/deletes both read and browse permissions in
      # thredds_workspace. And a read or a browse permission on thredds_workspace creates/deletes a read
      # permission on nginx_workspace.
      - "nginx_workspace : read <-> thredds_workspace : [read,browse]"
      # A write permission on nginx_workspace creates/deletes a write permission on thredds_workspace, and vice
      # versa.
      - "nginx_workspace : write <-> thredds_workspace : write"
  weaver_outputs:
    services:
      wps:
        process_description:
          - name: processes
            type: route
          - name: "{processID}"
            type: route
        process_job_status:
          - name: processes
            type: route
          - name: "{processID}"
            type: route
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
        job_status:
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
        job_outputs:
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
          - name: outputs
            type: route
        weaver_wps_outputs:
          - name: weaver
            type: route
          - name: "{jobID}"
            type: route
    permissions_mapping:
      # When user is granted access to an output (either side),
      # output retrieval is allowed from both endpoints (wps-outputs/weaver).
      - "weaver_wps_outputs : read <-> job_outputs : read"
      # When output can be retrieved, access to details about the process and
      # the job are also provided (to understand what each output represents),
      # but getting read access to a process description should not grant
      # access to all possible outputs of every underlying job of that process
      # (eg: different users running the same process = differnt job access,
      # but same process description visible).
      - "weaver_wps_outputs : read -> job_status : read"
      # process-prefixed items can be only one-way since wps-outputs does not
      # encode the 'processID' information ('jobID' directly the top-level dir)
      - "process_job_status : read -> weaver_wps_outputs : read"
      - "process_job_status : read -> job_status : read"
      # different permission (match), otherwise all jobs/outputs become available.
      - "process_job_status : read -> process_description : read-match"
