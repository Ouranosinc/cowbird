## Combined configuration definition to setup objects at Cowbird startup
## See documentation 'Configuration'

# [Required] Definition of managed services by Cowbird.
#
# services:
# ---------
#   [Required] Definition of managed services by Cowbird. Each service is provided as string that must match an actual
#   implementation in Cowbird. Each service must be further configured with one or more of the following parameters. If
#   a required parameter is missing for a service it will throw a `ServiceConfigurationException` exception.
#   For more details on available services on Magpie, refer to these pages :
#     - https://pavics-magpie.readthedocs.io/en/latest/services.html#available-services
#     - https://pavics-magpie.readthedocs.io/en/latest/autoapi/magpie/services/index.html
#
#   service:
#     active:             [optional, default=False] bool allowing to deactivate a service and stop managing it
#     priority:           [optional, default=math.inf] Relative priority between services while handling events
#                         Lower values have higher priority, default value is last
#     url:                [optional, default=None] URI of the web service represented by this Cowbird service.
#                         Some Cowbird services do not represent web service, but other will throw an exception if
#                         missing.
#     workspace_dir:      [optional, default=None] Location of the users workspace root.
#                         Required for the following services : FileSystem, Catalog and Geoserver
#
services:
  Magpie:
    active: true
    url: https://${HOSTNAME}/magpie
    admin_user: ${MAGPIE_ADMIN_USER}
    admin_password: ${MAGPIE_ADMIN_PASSWORD}
  Geoserver:
    active: true
    url: http://${HOSTNAME}:8765/geoserver
    workspace_dir: ${WORKSPACE_DIR}
    admin_user: ${GEOSERVER_ADMIN}
    admin_password: ${GEOSERVER_PASSWORD}
  Catalog:
    active: true
    url: https://${HOSTNAME}/twitcher/ows/proxy/catalog
    workspace_dir: ${WORKSPACE_DIR}
  Thredds:
    active: true
  Nginx:
    active: true
  FileSystem:
    active: true
    priority: 1
    workspace_dir: ${WORKSPACE_DIR}

# [Required] This section defines how to synchronize permissions between services when they share resources
sync_permissions:
  # Friendly name to identify a sync point (The value is not used by Cowbird so this can be any relevant keyword)
  user_workspace:
    # [Required] This section defines a list of services (referring to the service name of the 'services' section)
    # sharing resources
    services: # Contains the different resources that can be synchronized, ordered by service
      Geoserver: # Service name, which should also be found in the services list at the top of this file
        # Resource key (ex.: Geoserver_workspace): Custom name to represent a resource path.
        # It should correspond to the names used in the `permission_mappings` section below.
        # It contains the list of each segment of its resource path, with their corresponding name and type.
        #
        # The name of a segment can either contain a string name, a `SINGLE_TOKEN` `*` or a `MULTI_TOKEN` `**`.
        # Note that string names should be at the beginning of a path, and tokens can only be found
        # at the end of the path. This means that no named string should follow a token.
        #
        # SINGLE_TOKEN represent a single repetition of any name with the corresponding type. These tokens can be used
        # any number of time in a resource path.
        #
        # MULTI_TOKEN represent any number (0 or more) of names that fit with the corresponding type.
        # Also, the MULTI_TOKEN can only be used one time in each list of path segments. This is to avoid ambiguous
        # cases that would result with using multiple MULTI_TOKENs, since multiple ways of matching the resource path
        # would then be possible. For example with a tokenized path `**/**` and an input resource `seg1/seg2/seg3`,
        # multiple choices of matching appear when we try to match a suffix (mentioned below). We could match `seg1/seg2`
        # with the first token, and `seg3` with the second token, we could also match `seg1` with the first token, and
        # `seg2/seg3` with the second token, etc.
        #
        # The tokens are useful to know the types of any `suffix` path. A `suffix` path represents the segments
        # at the end of a path that are not named in the config below. For example, with the config below, if we have
        # an input resource path `/api/workspaces/private/dir1/dir2/file` that matches with the `Geoserver_workspace`
        # resource key, we have a `suffix` path `/dir1/dir2/file`.
        # Also, this key would need to sync permissions with the `Thredds_workspace` resource key, considering the
        # `permission_mappings` defined below. The `Thredds_workspace` would use the path
        # `/catalog/birdhouse/workspaces/private/` combined with the suffix `/dir1/dir2/file`.
        # The types of each segment of the target resource path `/catalog/birdhouse/workspaces/private/dir1/dir2/file`
        # would be deduced from the `Thredds_workspace` config below.
        Geoserver_workspace:
          - name: api
            type: service
          - name: workspaces
            type: workspace
          - name: private
            type: workspace
          - name: "**"
            type: workspace
      Thredds:
        Thredds_workspace:
          - name: catalog
            type: service
          - name: birdhouse
            type: folder
          - name: workspaces
            type: folder
          - name: private
            type: folder
          - name: "**"
            type: folder
          - name: "*"
            type: file
    # [Required] This section defines an array of permissions mapping between services
    # In this example, for every Geoserver_workspace's `read` permission, a `read` and `browse`
    # permissions will be created in Thredds_workspace.
    # If a `browse` permission is created in Thredds_workspace a `read` permission
    # will be added to `Geoserver_workspace`.
    permissions_mapping:
      - Geoserver_workspace: # 1st mapping between Geoserver_workspace:[read] and Thredds_workspace:[read,browse]
          - read
        Thredds_workspace:
          - read
          - browse
      - Geoserver_workspace: # 2nd mapping between Geoserver_workspace:[write] and Thredds_workspace:[execute]
          - write
        Thredds_workspace:
          - execute
