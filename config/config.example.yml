## Combined configuration definition to setup objects at Cowbird startup
## See documentation 'Configuration'

# [Required] Definition of managed services by Cowbird.
#
# services:
# ---------
#   [Required] Definition of managed services by Cowbird. Each service is provided as string that must match an actual
#   implementation in Cowbird. Each service must be further configured with one or more of the following parameters. If
#   a required parameter is missing for a service it will throw a `ServiceConfigurationException` exception.
#   For more details on available services on Magpie, refer to these pages :
#     - https://pavics-magpie.readthedocs.io/en/latest/services.html#available-services
#     - https://pavics-magpie.readthedocs.io/en/latest/autoapi/magpie/services/index.html
#
#   service:
#     active:             [optional, default=False] bool allowing to deactivate a service and stop managing it
#     priority:           [optional, default=math.inf] Relative priority between services while handling events
#                         Lower values have higher priority, default value is last
#     url:                [optional, default=None] URI of the web service represented by this Cowbird service.
#                         Some Cowbird services do not represent web service, but other will throw an exception if
#                         missing.
#     workspace_dir:      [optional, default=None] Location of the users workspace root.
#                         Required for the following services : FileSystem, Catalog and Geoserver
#
# FIXME: rename 'services' section here to 'handlers' and refactor (issue https://github.com/Ouranosinc/cowbird/issues/22)
services:
  Magpie:
    active: true
    url: https://${HOSTNAME}/magpie
    admin_user: ${MAGPIE_ADMIN_USER}
    admin_password: ${MAGPIE_ADMIN_PASSWORD}
  Geoserver:
    active: true
    url: http://${HOSTNAME}:8765/geoserver
    workspace_dir: ${WORKSPACE_DIR}
    admin_user: ${GEOSERVER_ADMIN}
    admin_password: ${GEOSERVER_PASSWORD}
  Catalog:
    active: true
    url: https://${HOSTNAME}/twitcher/ows/proxy/catalog
    workspace_dir: ${WORKSPACE_DIR}
  Thredds:
    active: true
  Nginx:
    active: true
  FileSystem:
    active: true
    priority: 1
    workspace_dir: ${WORKSPACE_DIR}

# [Required] This section defines how to synchronize permissions between services when they share resources
# This is used only for the synchronization of permissions between Magpie services/resources.
sync_permissions:
  # Friendly name to identify a sync point (The value is not used by Cowbird so this can be any relevant keyword)
  user_workspace:
    # [Required] This section defines a list of services and resources that exists in Magpie.
    # For more info on the services available in Magpie :
    #     https://pavics-magpie.readthedocs.io/en/latest/services.html#available-services
    #     https://pavics-magpie.readthedocs.io/en/latest/autoapi/magpie/services/index.html
    services: # Contains the different resources that can be synchronized, ordered by service
      thredds: # Service name, which should also exist in Magpie
        # Resource key (ex.: thredds_workspace): Custom name to represent a resource path.
        # It should correspond to the names used in the `permissions_mapping` section below.
        # It contains the list of each segment of its resource path, with their corresponding name and type.
        #
        # The name of a segment can either be a string name, a variable or a `MULTI_TOKEN` (`**`).
        #
        # Variables are indicated by a name written between braces (ex.: {variable_name}) and represent a single
        # segment name. A variable can be reused across different resource paths if they have
        # a matching segment name. A resource path can use any number of different variables, but
        # each variable can only be used one time per resource path.
        # They are useful to indicate the corresponding location of the resource segment in a mapped permission.
        # Note that all variables found in a target resource path should also be included in the source resource path.
        #
        # `MULTI_TOKEN` represent any number (0 or more) of names that fit with the corresponding type.
        # Also, the `MULTI_TOKEN` can only be used one time in each list of path segments. This is to avoid ambiguous
        # cases that would result with using multiple `MULTI_TOKEN`, since multiple ways of matching the resource path
        # would then be possible. For example with a tokenized path `**/**` and an input resource `seg1/seg2/seg3`,
        # multiple choices of matching appear when we try to match a suffix (mentioned below).
        # We could match `seg1/seg2` with the first token, and `seg3` with the second token,
        # we could also match `seg1` with the first token, and `seg2/seg3` with the second token, etc.
        #
        # The variables and tokens are useful to know the type of any segments that doesn't have a fixed name.
        # For example, with the config below, if we have an input resource path
        # `/geoserver/workspaces/user_xyz/dir1/dir2/file_abc` that matches with the `geoserver_workspace` resource key,
        # the `user` variable name would be matched with `user_xyz` and `synched_file`, with `file_abc`.
        # Also, this key would need to sync permissions with the `thredds_workspace` resource key, considering the
        # `permissions_mapping` defined below. The `thredds_workspace` would be deduced to the resource path
        # `/catalog/workspaces/user_xyz/dir1/dir2/subdir/file_abc`.
        # The types of each segment of this target resource path would be deduced
        # from the `thredds_workspace` config below.
        thredds_workspace:
          - name: catalog
            type: service
          - name: workspaces
            type: directory
          - name: "{user}"
            type: directory
          - name: "**"
            type: directory
          - name: subdir
            type: directory
          - name: "{synched_file}"
            type: file
      geoserver:
        geoserver_workspace:
          - name: geoserver
            type: service
          - name: workspaces
            type: workspace
          - name: "{user}"
            type: workspace
          - name: "**"
            type: workspace
          - name: "{synched_file}"
            type: workspace
    # [Required] This section defines an array of permissions mapping between services
    # Each item found in the `permissions_mapping` uses the following format :
    #     resource_key1 : <permissions1> <mapping> resource_key2 : <permissions2>
    # <permissionsX> is defined as a single permission or a list of permissions :
    #     `permission | [permission1, permission2, ...]`
    # <mapping> is defined as a unidirectional or bidirectional arrow : `-> | <- | <->`
    #
    # The permissions can either be a single permission or a list of permissions. Each of those permissions can either
    # use an implicit format (`<name>` or `<name>-match`) or an explicit format (`<name>-<access>-<scope>`).
    # When using an implicit format, if the access and/or scope are not specified, it will use the default
    # access `allow` and/or the default scope `recursive`.
    # For more info on Magpie permissions :
    #     https://pavics-magpie.readthedocs.io/en/latest/permissions.html#permission-definition-and-modifiers
    #     https://pavics-magpie.readthedocs.io/en/latest/permissions.html#permissions-representation
    #
    # The arrows between the 2 resources indicate the direction of the synchronization, and which resources can be a
    # source or target resource.
    #
    # In the case of `<->` arrow, the synchronization of permissions can be done in either direction. Also, it is
    # important to note that, in this case, both mapped resources should have matching variable names if any. This means
    # each resource needs to match all the variables of the other mapped resource. Also if one of the resource uses
    # the `**` MULTI_TOKEN, the other resource should also include it in its path, to know how to match the segments.
    #
    # In the case of `->` or `<-` arrow, the synchronization is only done one way. In this case, the source resource
    # path should include every variable names found in the target resource, but it can have more variables that
    # just won't be used in the target path. Also, if the target resource uses the MULTI_TOKEN `**`, the source
    # resource should have one too. The source can also use the `**` token even if the target doesn't include one.
    #
    # In the case of a `deleted` webhook event, note that the related target permissions only get removed if
    # they are not in another sync mapping as a target where the source permission still exists.
    # Deleting the target permission would break that other sync mapping, having an existing source permission
    # but a deleted target permission.
    # Instead, a target permission only gets deleted when all related source permissions are also deleted.
    # For example, with the following mappings :
    #   A -> C
    #   B -> C
    #   (or [A,B] -> C)
    # If the `A -> C` mapping was triggered for a `deleted` webhook event on `A`, the `C` target permission should only
    # be deleted if both `A` and `B` permissions don't exist.
    # Else, the `B -> C` mapping would become invalid if `B` exists and `C` was deleted.
    permissions_mapping:
      # A `read` permission for `thredds_workspace` creates/deletes all specified `geoserver_workspace` permissions.
      # And a specified `geoserver_workspace` permission creates/deletes a `read` permission on `thredds_workspace`.
      - "geoserver_workspace : [getCapabilities, getFeature, getFeatureInfo] <-> thredds_workspace : read"
      # A `createStoredQuery` permission on `geoserver_workspace` creates/deletes
      # a `write` permission on `thredds_workspace`, and vice versa.
      - "geoserver_workspace : createStoredQuery <-> thredds_workspace : write"
  weaver_outputs:
    services:
      api:
        process_description:
          - name: processes
            type: route
          - name: "{processID}"
            type: route
        process_job_status:
          - name: processes
            type: route
          - name: "{processID}"
            type: route
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
        job_status:
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
        job_outputs:
          - name: jobs
            type: route
          - name: "{jobID}"
            type: route
          - name: outputs
            type: route
        weaver_wps_outputs:
          - name: wpsoutputs
            type: route
          - name: weaver
            type: route
          - name: "{jobID}"
            type: route
    permissions_mapping:
      # When user is granted access to an output (either side),
      # output retrieval is allowed from both endpoints (wps-outputs/weaver).
      - "weaver_wps_outputs : read <-> job_outputs : read"
      # When output can be retrieved, access to details about the process and
      # the job are also provided (to understand what each output represents),
      # but getting read access to a process description should not grant
      # access to all possible outputs of every underlying job of that process
      # (eg: different users running the same process = differnt job access,
      # but same process description visible).
      - "weaver_wps_outputs : read -> job_status : read"
      # process-prefixed items can be only one-way since wps-outputs does not
      # encode the 'processID' information ('jobID' directly the top-level dir)
      - "process_job_status : read -> weaver_wps_outputs : read"
      - "process_job_status : read -> job_status : read"
      # different permission (match), otherwise all jobs/outputs become available.
      - "process_job_status : read -> process_description : read-match"
